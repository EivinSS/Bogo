//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/BallInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BallInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BallInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BallInput"",
    ""maps"": [
        {
            ""name"": ""PogoControls"",
            ""id"": ""798c781b-96f2-4878-9947-1870566a8b5c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""56a2a5f5-6265-4cbe-b45e-1f6d470a7f05"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8b5c0b6e-4651-4da0-9e51-cb25851d44cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f73ba4dd-3584-4c28-9a0b-4f8a8697452e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99a31945-92b1-47f2-90bb-07774be7d7ed"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cb5bc02d-a325-4f4c-ba4e-673697148b9a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b78eeb60-40d4-45ef-93b9-5c0dd8d2386d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""958ea137-b153-404b-8c31-c26d0f0210cd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2143efb2-8ede-4625-bf72-28afa6cbf3f6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1f1d704d-9955-463d-9785-a2d8f1995c93"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PogoControls
        m_PogoControls = asset.FindActionMap("PogoControls", throwIfNotFound: true);
        m_PogoControls_Move = m_PogoControls.FindAction("Move", throwIfNotFound: true);
        m_PogoControls_Jump = m_PogoControls.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PogoControls
    private readonly InputActionMap m_PogoControls;
    private List<IPogoControlsActions> m_PogoControlsActionsCallbackInterfaces = new List<IPogoControlsActions>();
    private readonly InputAction m_PogoControls_Move;
    private readonly InputAction m_PogoControls_Jump;
    public struct PogoControlsActions
    {
        private @BallInput m_Wrapper;
        public PogoControlsActions(@BallInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PogoControls_Move;
        public InputAction @Jump => m_Wrapper.m_PogoControls_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PogoControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PogoControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPogoControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PogoControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PogoControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPogoControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPogoControlsActions instance)
        {
            if (m_Wrapper.m_PogoControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPogoControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PogoControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PogoControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PogoControlsActions @PogoControls => new PogoControlsActions(this);
    public interface IPogoControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
